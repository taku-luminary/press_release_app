<!-- メッセージ表示エリア -->
<div class="chat-container">
  <div class="messages">
    <% if press_thread.messages.any? %>
      <% press_thread.messages.each do |message| %>
        <div class="message <%= message.role %>" data-message-id="<%= message.id %>">
          <div class="message-content">
            <div class="message-text" id="message-text-<%= message.id %>">
              <% if message.role == 'assistant' %>
                <%= markdown(message.content) %>
              <% else %>
                <%= simple_format(message.content) %>
              <% end %>
            </div>
            <% if message.role == 'assistant' %>
              <div class="message-actions">
                <button type="button" class="edit-message-btn" onclick="editMessage(<%= message.id %>)" title="回答を編集">
                  ✏︎
                </button>
              </div>
            <% end %>
          </div>
          <% if message.role == 'assistant' %>
            <div class="message-edit-form" id="edit-form-<%= message.id %>" style="display:none;">
              <textarea class="edit-textarea" id="edit-textarea-<%= message.id %>"><%= message.content %></textarea>
              <div class="edit-actions">
                <button type="button" onclick="saveMessage(<%= message.id %>)" class="save-edit-btn">保存</button>
                <button type="button" onclick="cancelEdit(<%= message.id %>)" class="cancel-edit-btn">キャンセル</button>
              </div>
            </div>
          <% end %>
        </div>
      <% end %>
    <% else %>
      <div class="welcome-message">
        <p>フォームに情報を入力して、プレスリリースの作成を開始してください。</p>
      </div>
    <% end %>
  </div>

  <%= form_with(model: message, url: press_thread_messages_path(press_thread), class: 'message-form', data: { thread_id: press_thread.id }) do |f| %>
    <%= f.hidden_field :press_thread_id, value: press_thread.id %>
    <div class="message-input">
      <%= f.text_area :content, class: 'message-textarea', placeholder: 'メッセージを入力...', required: true %>
      <%= f.submit '⬆', class: 'send-button' %>
    </div>
  <% end %>
</div>

<style>
.chat-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 0;
  background-color: #f8f8f8;
  border-radius: 8px;
  overflow: hidden;
}

.messages {
  flex: 1;
  min-height: 0;
  overflow-y: auto;
  padding: 10px 20px;
  padding-bottom: 500px;
  margin-bottom: 100px;
}

.message {
  margin-bottom: 15px;
  max-width: 80%;
}

.message:first-child {
  margin-top: 0;
}

.message:last-child {
  margin-bottom: 50px;
}

.message.user {
  margin-left: auto;
}

.message.assistant {
  margin-right: auto;
}

.message-content {
  padding: 12px 16px;
  border-radius: 12px;
  background-color: #ffffff;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);
  word-wrap: break-word;
  word-break: break-word;
  white-space: pre-wrap;
  line-height: 1.5;
  position: relative;
}

.message.user .message-content {
  background-color: #e8e8e8;
  color: #333333;
}

.message.assistant .message-content {
  background-color: #ffffff;
  color: #333333;
}

.message-input {
  display: flex;
  align-items: flex-end;
  padding: 14px;
  background-color: #ffffff;
  border-top: 1px solid #e0e0e0;
  position: relative;
}

.message-textarea {
  flex: 1;
  padding: 12px;
  padding-right: 50px;
  border: 1px solid #d0d0d0;
  border-radius: 4px;
  resize: none;
  height: 42px;
}

.message-textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}

.send-button {
  position: absolute;
  right: 25px;
  bottom: 20px;
  width: 32px;
  height: 32px;
  background-color: #333333;
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
  font-size: 16px;
  font-weight: bold;
}

.send-button:hover {
  background-color: #555555;
}

.loading-message {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 8px;
  margin-bottom: 20px;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 3px solid #e8e8e8;
  border-top: 3px solid #333333;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.message-textarea:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

/* メッセージ編集機能 */
.message-actions {
  position: absolute;
  top: 8px;
  right: 8px;
  opacity: 0;
  transition: opacity 0.2s;
}

.message.assistant:hover .message-actions {
  opacity: 1;
}

.edit-message-btn {
  background: none;
  border: none;
  color: #888888;
  cursor: pointer;
  padding: 4px;
  font-size: 14px;
  border-radius: 4px;
  transition: color 0.2s, background-color 0.2s;
}

.edit-message-btn:hover {
  color: #333333;
  background-color: #f0f0f0;
}

.message-edit-form {
  margin-top: 10px;
  padding: 12px;
  background-color: #f8f8f8;
  border-radius: 8px;
  border: 1px solid #e0e0e0;
}

.edit-textarea {
  width: 100%;
  min-height: 100px;
  padding: 10px;
  border: 1px solid #d0d0d0;
  border-radius: 4px;
  font-size: 14px;
  line-height: 1.5;
  resize: vertical;
  font-family: inherit;
}

.edit-textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}

.edit-actions {
  display: flex;
  gap: 8px;
  margin-top: 10px;
  justify-content: flex-end;
}

.save-edit-btn, .cancel-edit-btn {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
  transition: background-color 0.2s;
}

.save-edit-btn {
  background-color: #333333;
  color: white;
}

.save-edit-btn:hover {
  background-color: #555555;
}

.cancel-edit-btn {
  background-color: #f5f5f5;
  color: #333333;
  border: 1px solid #d0d0d0;
}

.cancel-edit-btn:hover {
  background-color: #e8e8e8;
}

/* マークダウンスタイル */
.message-content h1,
.message-content h2,
.message-content h3,
.message-content h4,
.message-content h5,
.message-content h6 {
 margin: 1em 0 0.5em 0;
 font-weight: bold;
 line-height: 1.2;
}

.message-content h1 { font-size: 1.5em; }
.message-content h2 { font-size: 1.3em; }
.message-content h3 { font-size: 1.1em; }
.message-content h4,
.message-content h5,
.message-content h6 { font-size: 1em; }

.message-content strong,
.message-content b {
 font-weight: bold;
}

.message-content em,
.message-content i {
 font-style: italic;
}

.message-content ul,
.message-content ol {
 margin: 0.5em 0;
 padding-left: 1.5em;
}

.message-content li {
 margin: 0.25em 0;
}

.message-content blockquote {
 margin: 1em 0;
 padding: 0.5em 1em;
 border-left: 3px solid #ddd;
 background-color: #f9f9f9;
 font-style: italic;
}

.message-content code {
 background-color: #f5f5f5;
 padding: 0.2em 0.4em;
 border-radius: 3px;
 font-family: 'Courier New', monospace;
 font-size: 0.9em;
}

.message-content pre {
 background-color: #f5f5f5;
 padding: 1em;
 border-radius: 5px;
 overflow-x: auto;
 margin: 1em 0;
}

.message-content pre code {
 background: none;
 padding: 0;
}

.message-content table {
 border-collapse: collapse;
 width: 100%;
 margin: 1em 0;
}

.message-content th,
.message-content td {
 border: 1px solid #ddd;
 padding: 0.5em;
 text-align: left;
}

.message-content th {
 background-color: #f5f5f5;
 font-weight: bold;
}

.message-content a {
 color: #007bff;
 text-decoration: underline;
}

.message-content a:hover {
 color: #0056b3;
}
</style>

<script>
  // メッセージを最下部にスクロール
  function scrollToBottom() {
    const messagesContainer = document.querySelector('.messages');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // 初期表示時に最下部にスクロール
  document.addEventListener('DOMContentLoaded', scrollToBottom);

  // コンテンツ更新後にも最下部にスクロール
  const observer = new MutationObserver(function(mutations) {
    scrollToBottom();
  });

  const messagesContainer = document.querySelector('.messages');
  if (messagesContainer) {
    observer.observe(messagesContainer, {
      childList: true,
      subtree: true
    });
  }

  // メッセージ編集機能をグローバルに追加
  window.editMessage = function(messageId) {
    const messageText = document.getElementById(`message-text-${messageId}`);
    const editForm = document.getElementById(`edit-form-${messageId}`);
    
    if (messageText && editForm) {
      messageText.style.display = 'none';
      editForm.style.display = 'block';
      
      // テキストエリアにフォーカス
      const textarea = document.getElementById(`edit-textarea-${messageId}`);
      if (textarea) {
        textarea.focus();
        textarea.setSelectionRange(textarea.value.length, textarea.value.length);
      }
    }
  }

  window.cancelEdit = function(messageId) {
    const messageText = document.getElementById(`message-text-${messageId}`);
    const editForm = document.getElementById(`edit-form-${messageId}`);
    
    if (messageText && editForm) {
      messageText.style.display = 'block';
      editForm.style.display = 'none';
    }
  }

  window.saveMessage = function(messageId) {
    const textarea = document.getElementById(`edit-textarea-${messageId}`);
    const newContent = textarea.value;
    
    fetch(`/messages/${messageId}`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        message: { content: newContent }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // メッセージテキストを更新
        const messageText = document.getElementById(`message-text-${messageId}`);
        messageText.textContent = newContent;
        
        // 編集モードを終了
        cancelEdit(messageId);
      } else {
        alert('メッセージの更新に失敗しました。');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('エラーが発生しました。');
    });
  }
</script> 